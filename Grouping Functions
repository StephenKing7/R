apply - when you want to apply a function to the rows or columns of a matrix

m <- matrix(seq(1,20), 4, 5)  #  create a column-wise matrix with 4 rows and 5 columns
apply(m, 1, min)  #  return the min value across all rows (1 denotes 'row')
apply(m, 2, max)  #  return the max value across all columns (2 denotes 'column)

colMeans(m)
rowMeans(m)
colSums(m)
rowSums(m)

lapply - when you want to apply a function to each element of a list in turn and get a list back

x <- list(a=1, b=1:3, c=10:100)
lapply(x, FUN=length)  #  caculate the length of each element in list - return list
lapply(x, FUN=sum)  #  calculate the sum of each element in list - return list

sapply - when you want to apply a function to each element of a list in turn, but you want to get a vector back.. not a list
  use 'sapply' instead of 'unlist(lapply(...))'

x <- list(a=1, b=1:3, c=10:100)
sapply(x, FUN=length)  #  calculate the length of each element in list - return vector
sapply(x, FUN=sum)  #  calculate the sum of each element in list - return vector

mapply - when you have several data structures (e.g. vectors, lists) and you want to apply a function to the 1st elements of each, and then the 2nd elements of each, etc., coercing the result to a vector/array as in sapply
mapply(sum, 1:5, 1:5, 1:5)
mapply(rep, 1:4, 4:1)

aggregate - splits data into subsets and performs summary statistics
aggregate(x, by, FUN)

subset(mydata, mydata$col1 == x, select=c(col2, col3))  #  return columns 2 and 3 where col1 = value x
